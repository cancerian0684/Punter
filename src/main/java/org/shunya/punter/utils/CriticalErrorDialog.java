package org.shunya.punter.utils;

import org.shunya.punter.gui.AppSettings;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.nio.charset.Charset;
import java.util.Date;

public class CriticalErrorDialog extends javax.swing.JFrame 
				implements Thread.UncaughtExceptionHandler {
    /** Creates new form SendDontSend */
    public CriticalErrorDialog(java.awt.Frame parent, boolean modal) {
        //super(parent, modal);
		/*
		 * try{ File f1=new File("Images/SM.png"); Image image =
		 * javax.imageio.ImageIO.read(f1); setIconImage(image); }
		 * catch(Exception e){ e.printStackTrace(); }
		 */
        initComponents();
        setLocationRelativeTo(null);
        //setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jBtnSend = new javax.swing.JButton();
        jBtnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLMessage = new javax.swing.JLabel();
        // jTextArea1.append("Exception occurred..");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Critical Error");
		jTextArea1.setColumns(30);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Critical Error Report"));
        jScrollPane1.setViewportView(jTextArea1);
		jBtnSend.setVisible(true);
        jBtnSend.setText("Send");
        jBtnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSendActionPerformed(evt);
            }
        });

        jBtnSave.setText("Close");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

		jLabel1.setText("Punter Encountered a Runtime error, details are mentioned below : ");

        jLMessage.setText("  ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSave)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnSend)
                        .addComponent(jLMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBtnSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>                        

    private void jBtnSendActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	dispose();
    }                                        

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	dispose();
    }                                        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
		Thread.UncaughtExceptionHandler handler = new CriticalErrorDialog(new javax.swing.JFrame(), true);
		Thread.setDefaultUncaughtExceptionHandler(handler);
		throw new RuntimeException("should be caught");
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton jBtnSave;
    private javax.swing.JButton jBtnSend;
    private javax.swing.JLabel jLMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
	public void uncaughtException(Thread t, Throwable e) {
	    addStackInfo(e);
	 }
	 public void addStackInfo(final Throwable t) {
		    EventQueue.invokeLater(new Runnable() {
		      public void run() {
		        // Bring window to foreground
				try {
					BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(
							new FileOutputStream(getLogFileName(), true), Charset.forName("UTF-8")));
					StringWriter sw = new StringWriter();
					PrintWriter out = new PrintWriter(sw);
					out.write("Logged User : " + AppSettings.getInstance().getSmtpUsername() + "\n");
					t.printStackTrace(out);
					bout.write(sw.toString());
					System.err.println(sw.toString());
					setVisible(true);
					toFront();
					// Convert stack dump to string
					// Add string to end of text area
					jTextArea1.setText(sw.toString());
					bout.close();
				} catch (Exception e) {
		    		  e.printStackTrace();
		    		  JOptionPane.showMessageDialog(null, "Error in displaying previous error message.");
		    	  }
		     }
		  });
		}
	 public String getLogFileName(){
	        Date date =new Date();
	        int y=date.getYear()+1900;
	        int M=date.getMonth()+1;
	        int d=date.getDate();
	        int h=date.getHours();
	        int m=date.getMinutes();
	        int s=date.getSeconds();
	        return ""+y+"_"+M+"_"+d+"_"+h+".log";    
	    }
}
